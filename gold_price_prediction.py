# -*- coding: utf-8 -*-
"""Gold price prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1O44xstR8bNbLkjm2R6sss1ob4tyW7dSe

Importing the libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn import metrics
from sklearn.ensemble import RandomForestRegressor
regressor = RandomForestRegressor()

"""Data collection and Processing

"""

# loading the csv data to a pandas Dataframe
gold_data = pd.read_csv('/content/gld_price_data.csv')

# print first 5 rows in dataset
gold_data.head()

# print last 5 rows in the dataset
gold_data.tail()

# number of rows and column
gold_data.shape

# getting some basic information about the data
gold_data.info()

# checking the number of missing value
gold_data.isnull().sum()

# getting the statistical meaure of data
gold_data.describe()

"""Correlation:  
positive Correlation  
Negative Correlation
"""

correlation = gold_data.select_dtypes(include='number').corr()

# constructing a heatmap to understand the correlation
plt.figure(figsize=(8,8))
sns.heatmap(correlation,cbar=True,square=True,fmt='.1f',annot=True,annot_kws={'size':8},cmap='Blues')

# correlation values of GLD
print(correlation['GLD'])

# checking the distribution of the GLD price
sns.distplot(gold_data['GLD'],color='green')

"""Splitting the Feature and Target"""

x=gold_data.drop(['Date','GLD'],axis=1)
y=gold_data['GLD']

print(x)

print(y)

"""Splitting into training data and testing data"""

x_train,x_test,y_train,y_test=train_test_split(x,y, test_size=0.2, random_state=2)

"""Model Training  
Random Forest Algorithm
"""

regressor=RandomForestClassifier(n_estimators=100)

# training rhe model
regressor.fit(x_train,y_train)

"""Model Evaluation"""

# prediction on Test Data
test_data_prediction=regressor.predict(x_test)

print(test_data_prediction)

# R squared error
error_score=metrics.r2_score(y_test,test_data_prediction)
print("R squared error : ",error_score)

"""Compare the actual value and predicted value"""

y_test=list(y_test)

plt.plot(y_test,color='blue',label='Actual Value')
plt.plot(test_data_prediction,color='green',label='Predicted Value')
plt.title('Actual Price vs Predicted Price')
plt.xlabel('Number of values')
plt.ylabel('GLD Price')
plt.legend()
plt.show()

